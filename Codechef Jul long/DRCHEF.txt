/* package codechef; // don't place package name! */

import java.util.*;
import java.lang.*;
import java.io.*;

/* Name of the class has to be "Main" only if the class is public. */
class Codechef
{
    public static int value(int[] a,int[] b){
        int xox=0;
        for(int i=0;i<a.length;i++){
            xox=xox^a[i];
            xox=xox^b[i];
        }
        return xox;
    }
    public static long solve(int[] a,int[] b){
        if(Arrays.equals(a,b))
        return 0;
        
        int val=value(a,b);
        if(val>0)
        return -1;
        
        int auxa[]=new int[100];
        int auxb[]=new int[100];
        for(int i=0;i<a.length;i++){
            auxa[a[i]-1]++;
            auxb[b[i]-1]++;
        }
        ArrayList<Integer> al=new ArrayList<>();
        for(int i=0;i<100;i++){
            if(auxa[i]!=auxb[i])
            for(int j=0;j<(Math.abs(auxa[i]-auxb[i])/2);j++)
            al.add(i+1);
        }
        long ans=0;
        for(int i=0;i<(al.size()/2);i++){
            ans=ans+al.get(i);
        }
        return ans;
    }
	public static void main (String[] args) throws java.lang.Exception
	{
	    Scanner sc=new Scanner(System.in);
	    int t=sc.nextInt();
	    while(t-->0){
	        int n=sc.nextInt();
	        int a[]=new int[n];
	        int b[]=new int[n];
	        for(int i=0;i<n;i++)
	        a[i]=sc.nextInt();
	        for(int i=0;i<n;i++)
	        b[i]=sc.nextInt();
	        Arrays.sort(a);
	        Arrays.sort(b);
	        long ans=solve(a,b);
	        
	        System.out.println(ans);
	    }
	}
}


















//ac
/* package codechef; // don't place package name! */

import java.util.*;
import java.lang.*;
import java.io.*;

/* Name of the class has to be "Main" only if the class is public. */
class Codechef
{
    public static int value(int[] a,int[] b){
        int xox=0;
        for(int i=0;i<a.length;i++){
            xox=xox^a[i];
            xox=xox^b[i];
        }
        return xox;
    }
    public static long solve(int[] a,int[] b){
        if(Arrays.equals(a,b))
        return 0;
        
        int val=value(a,b);
        if(val>0)
        return -1;
        
        int auxa[]=new int[100];
        int auxb[]=new int[100];
        for(int i=0;i<a.length;i++){
            auxa[a[i]-1]++;
            auxb[b[i]-1]++;
        }
        ArrayList<Integer> al=new ArrayList<>();
        for(int i=0;i<100;i++){
            if(auxa[i]!=auxb[i])
            for(int j=0;j<(Math.abs(auxa[i]-auxb[i])/2);j++)
            al.add(i+1);
        }
        long ans=0;
        for(int i=0;i<(al.size()/2);i++){
            ans=ans+al.get(i);
        }
        return ans;
    }
	public static void main (String[] args) throws java.lang.Exception
	{
	    Scanner sc=new Scanner(System.in);
	    int t=sc.nextInt();
	    while(t-->0){
	        int n=sc.nextInt();
	        int a[]=new int[n];
	        int b[]=new int[n];
	        for(int i=0;i<n;i++)
	        a[i]=sc.nextInt();
	        for(int i=0;i<n;i++)
	        b[i]=sc.nextInt();
	        Arrays.sort(a);
	        Arrays.sort(b);
	        long ans=solve(a,b);
	        
	        System.out.println(ans);
	    }
	}
}


















//














/* package codechef; // don't place package name! */

import java.util.*;
import java.lang.*;
import java.io.*;

/* Name of the class has to be "Main" only if the class is public. */
class Codechef
{
        public static int findNearest(ArrayList<Long> al,long med){
                
                for(int i=0;i<al.size()-1;i++){
                        if(al.get(i)>med)
                        return i;
                }
                return 0;
        }
	public static void main (String[] args) throws java.lang.Exception
	{
	        Scanner sc=new Scanner(System.in);
	        int to=sc.nextInt();
	        while(to-->0){
	                int n=sc.nextInt();
	                long med=sc.nextInt();
	                ArrayList<Long> al=new ArrayList<>();
	                
	                for(int i=0;i<n;i++){
	                        long inp=sc.nextLong();
	                        al.add(inp);
	                }
	                Collections.sort(al);
	                int x=findNearest(al,med);long d=0;
	                for(int i=x;i<n;i++){
	                        if(med<al.get(i)){
	                                while(med<al.get(i)){
	                                        med=2*med;
	                                        d++;
	                                }
	                               d++;
	                        }
	                        else
	                                d++;
	                                med=2*al.get(i);
	                }
	                        long t=x+d;
	                        if(x!=0){
	                                d=0;
	                                x=x-1;
	                                for(int i=x;i<n;i++)
        	                        {
    		                                if(med<al.get(i))
    		                                 {
    			                                 while(med<al.get(i))
                                            			{
                                            				med=med*2;
                                            				d++;
                                            			}
                                            			d++;
                                            		}
                                            		else
                                            		d++;
                                            		med=2*al.get(i);
                                            	}
                                            	long ans=Math.min(d+x,t);
                                            	System.out.println(ans);
	                        }
	                        else
	                        System.out.println(t);
	        }
	}
}















