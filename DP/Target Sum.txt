class Solution {
    public static boolean[] subsum(int w[],int c,int n){
       boolean dp[][]=new boolean[n+1][c+1];
       for(int i=0;i<n+1;i++){
           for(int j=0;j<c+1;j++){
               if(i==0&&j==0)
               dp[i][j]=true;
               else if(i==0)
               dp[i][j]=true;
               else if(j==0)
               dp[i][j]=false;
           }
       }
       for(int i=1;i<n+1;i++){
           for(int j=1;j<c+1;j++){
               if(w[i-1]<=j){
                   dp[i][j]=(dp[i-1][j-w[i-1]])||(dp[i-1][j]);
               }
               else
               dp[i][j]=dp[i-1][j];
           }
       }
       return dp[n];
    }
    public int findTargetSumWays(int[] nums, int S) {
        int n=nums.length;
        int sum=0;
        for(int i=0;i<n;i++)
            sum+=nums[i];
        int c=0;
        boolean va[]=subsum(nums,sum,n);
        for(int i=0;i<(va.length/2);i++){
            if((sum-2*i)==S)
                c++;
        }
        return c;
    }
}










