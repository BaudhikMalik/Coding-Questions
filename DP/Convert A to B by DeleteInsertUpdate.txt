public class Solution {
    public int minDistance(String A, String B) {
        if (A == null && B == null) return 0;
        int m = A.length(), n = B.length();
        int[][] dp = new int[m + 1][n + 1];
        for (int i = 0; i <= m; i++)
            dp[i][0] = i;
        for (int j = 0; j <= n; j++)
            dp[0][j] = j;
        // dp[i][j] stands for the minimum distance for substring ending in i for String A and substring 
        // of B ending in j
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                char chA = A.charAt(i);
                char chB = B.charAt(j);
                if (chA == chB)
                    dp[i + 1][j + 1] = dp[i][j];
                else {
                    dp[i + 1][j + 1] = min3(dp[i][j], dp[i + 1][j], dp[i][j + 1]) + 1;
                } 
            }
        }
        return dp[m][n];
        
    }
    
    private int min3(int a, int b, int c) {
        return Math.min(Math.min(a, b), c);
    }
}




