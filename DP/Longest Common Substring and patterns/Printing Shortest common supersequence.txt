class Solution {
    public String shortestCommonSupersequence(String x, String y) {
      int m = x.length();
        int n = y.length();

        int[][] t = new int[m + 1][n + 1];

        for (int i = 1; i <= m; i++) {
            for (int j = 1; j <= n; j++) {
                if (x.charAt(i - 1) == y.charAt(j - 1))
                    t[i][j] = 1 + t[i - 1][j - 1];
                else
                    t[i][j] = Math.max(t[i - 1][j], t[i][j - 1]);
            }
        }

        StringBuilder sb = new StringBuilder();

        int i = m;
        int j = n;
	//Now we are just doin like as in LCS Printing
	//JUst that we add the remaining in last
        while (i > 0 && j > 0) {
            if (x.charAt(i - 1) == y.charAt(j - 1)) {
                sb.append(x.charAt(i - 1));
                i--;
                j--;
            } else {
                if (t[i - 1][j] > t[i][j - 1]) {
                    sb.append(x.charAt(i - 1));
                    i--;
                }
                else {
                    sb.append(y.charAt(j - 1));
                    j--;
                }

            }
        }

        while (i > 0)
            sb.append(x.charAt(--i));
        while (j > 0)
            sb.append(y.charAt(--j));

        return sb.reverse().toString();
    }
}