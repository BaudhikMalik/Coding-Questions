//Recursive Code
Recursion-> Recursion with Memoization -> DP

class Solution {
    public int longestCommonSubsequence(String text1, String text2) {
        int l1=text1.length();int l2=text2.length();
        if(l1==0||l2==0)
            return 0;
        
        if(text1.charAt(l1-1)==text2.charAt(l2-1))
            return 1+longestCommonSubsequence(text1.substring(0,l1-1),text2.substring(0,l2-1));
        else 
            return Math.max(longestCommonSubsequence(text1.substring(0,l1-1),text2.substring(0,l2)),longestCommonSubsequence(text1.substring(0,l1),text2.substring(0,l2-1)));
           
    }
}

//Time Limit Exceeded Cause Recursion stack filled



Dynamic Programming Problem Solution


class Solution {
    public int longestCommonSubsequence(String text1, String text2) {
        int l1=text1.length();int l2=text2.length();
        int dp[][]=new int[l1+1][l2+1];
        
        for(int i=1;i<l1+1;i++){
            for(int j=1;j<l2+1;j++){
                if(text1.charAt(i-1)==text2.charAt(j-1))
                dp[i][j]=1+dp[i-1][j-1];
                else
                    dp[i][j]=Math.max(dp[i-1][j],dp[i][j-1]);
            }
        }
        return dp[l1][l2];
    }
}








Remember Always, If the recursive call is being done
only 1 time, no DP is needed

Whereas Multiple recursive calls for the same function are done, 
Dp is needed



