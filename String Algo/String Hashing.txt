We want to solve the problem of comparing strings efficiently. 
The brute force way of doing so is just to compare the letters of both strings, 
which has a time complexity of O(min(n1,n2)) if n1 and n2 are the sizes of the two strings. 
We want to do better. The idea behind strings is the following: 
we convert each string into an integer and compare those instead of the strings. 
Comparing two strings is then an O(1) operation.

For the conversion,
 we need a so-called hash function. 
The goal of it is to convert a string into an integer, 
the so-called hash of the string. 
The following condition has to hold: 
if two strings s and t are equal (s=t), 
then also their hashes have to be equal 
(hash(s)=hash(t)). Otherwise, we will not be able to compare strings.

Notice, the opposite direction doesn't have to hold. 
If the hashes are equal (hash(s)=hash(t)), 
then the strings do not necessarily have to be equal. 
E.g. a valid hash function would be simply hash(s)=0 for each s. 
Now, this is just a stupid example, because this function will be completely useless, 
but it is a valid hash function. The reason why the opposite direction doesn't have to hold, 
if because there are exponential many strings. If we only want this hash function to distinguish between all strings consisting of lowercase characters of length smaller than 15, then already the hash wouldn't fit into a 64-bit integer (e.g. unsigned long long) any more, because there are so many of them. And of course, we don't want to compare arbitrary long integers, because this will also have the complexity O(n).

So usually we want the hash function to map strings onto numbers of a fixed range [0,m), then comparing strings is just a comparison of two integers with a fixed length. And of course, we want hash(s)≠hash(t) to be very likely if s≠t.


int count_unique_substrings(string const& s) {
    int n = s.size();

    const int p = 31;
    const int m = 1e9 + 9;
    vector<long long> p_pow(n);
    p_pow[0] = 1;
    for (int i = 1; i < n; i++)
        p_pow[i] = (p_pow[i-1] * p) % m;

    vector<long long> h(n + 1, 0);
    for (int i = 0; i < n; i++)
        h[i+1] = (h[i] + (s[i] - 'a' + 1) * p_pow[i]) % m;

    int cnt = 0;
    for (int l = 1; l <= n; l++) {
        set<long long> hs;
        for (int i = 0; i <= n - l; i++) {
            long long cur_h = (h[i + l] + m - h[i]) % m;
            cur_h = (cur_h * p_pow[n-i-1]) % m;
            hs.insert(cur_h);
        }
        cnt += hs.size();
    }
    return cnt;
}