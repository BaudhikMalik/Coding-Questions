// uses Queue data structure

import java.util.*;

public class Graph {
  private int V;
  private LinkedList<Integer> adj[];

  // Create a graph
  Graph(int v) {
    V = v;
    adj = new LinkedList[v];
    for (int i = 0; i < v; ++i)
      adj[i] = new LinkedList();
  }

  // Add edges to the graph
  void addEdge(int v, int w) {
    adj[v].add(w);
  }

  // BFS algorithm
  void BFS(int s) {

    boolean visited[] = new boolean[V];

    LinkedList<Integer> queue = new LinkedList();

    visited[s] = true;
    queue.add(s);

    while (queue.size() != 0) {
      s = queue.poll();
      System.out.print(s + " ");

      Iterator<Integer> i = adj[s].listIterator();
      while (i.hasNext()) {
        int n = i.next();
        if (!visited[n]) {
          visited[n] = true;
          queue.add(n);
        }
      }
    }
  }

  public static void main(String args[]) {
    Graph g = new Graph(4);

    g.addEdge(0, 1);
    g.addEdge(0, 2);
    g.addEdge(1, 2);
    g.addEdge(2, 0);
    g.addEdge(2, 3);
    g.addEdge(3, 3);

    System.out.println("Following is Breadth First Traversal " + "(starting from vertex 2)");

    g.BFS(2);
  }
}




//Adjacency List
class Traversal {
    static ArrayList<Integer> bfs(ArrayList<ArrayList<Integer>> g, int N) {
        boolean vis[] = new boolean[N];
            for (int i = 0; i <N; i++) vis[i] = false;
            
        int src = 0;
        ArrayList<Integer> res = new ArrayList<Integer>(0);
        Queue<Integer> q = new LinkedList<>();
        vis[src] = true;      
        q.add(src);           
        while (q.size() != 0) 
        {
            src = q.poll();
            res.add (src);
            Iterator<Integer> it = g.get(src).iterator();
            while (it.hasNext()) 
            {
                int n = it.next();
                if (!vis[n]) 
                {
                    vis[n] = true;
                    q.add(n);
                }
            }
        }
        return res;
        
    }
}