class Solution {
    private boolean[] marked;
    private boolean[] onStack;
    private boolean hasCycle;
	
    public boolean canFinish(int numCourses, int[][] prerequisites) {
        List<Integer>[] graph = initGraph(numCourses, prerequisites);
        for (int v = 0; v < numCourses; v++) {
            if (!marked[v]) {
                dfs(graph, v);
            }
        }
        return !hasCycle();
    }
	
    private boolean hasCycle() {
        return hasCycle;
    }
	
    private void dfs(List<Integer>[] graph, int v) {
        onStack[v] = true;
        marked[v] = true;
        for (int w : graph[v]) {
            if (hasCycle) {
                return;
            }
            if (!marked[w]) {
                dfs(graph, w);
            }
            else if (onStack[w]) {
                hasCycle = true;
            }
        }
        onStack[v] = false;
    }
	
    private List<Integer>[] initGraph(int N, int[][] edges){
        marked = new boolean[N];
        onStack = new boolean[N];
        List<Integer>[] graph = (List<Integer>[]) new LinkedList[N];
        for (int i = 0; i < N; i++) graph[i] = new LinkedList<>();
        for (int[] edge : edges) {
            graph[edge[1]].add(edge[0]);
        }
        return graph;
    }
}